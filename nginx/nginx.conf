worker_processes  1;
events { worker_connections 1024; }

http {
  sendfile on;
  tcp_nopush on;
  types_hash_max_size 2048;
  include       mime.types;
  default_type  application/octet-stream;

  server {
    listen 80;
    server_name _;

    # Launcher (static)
    location = / {
      root /usr/share/launcher;
      index index.html;
    }
    # Static shared assets
    location /shared/ {
      alias /usr/share/launcher/shared/;
      # allow framing same-origin
      add_header X-Frame-Options "SAMEORIGIN";
      add_header Referrer-Policy "no-referrer-when-downgrade";
    }

    # Proxy to each app running on localhost internal ports.
    # nginx is running in a container on the same Docker network;
    # we proxy to the host.docker.internal (or service names if using Docker Compose)
    # Common approach: Docker Compose will link services; in compose we use service names.

    location /react/ {
      proxy_pass http://react:3000/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_hide_header X-Frame-Options;
      # Allow embedding
      add_header X-Frame-Options "SAMEORIGIN";
    }

    location /angular/ {
      proxy_pass http://angular:4200/;
      proxy_set_header Host $host;
      proxy_hide_header X-Frame-Options;
      add_header X-Frame-Options "SAMEORIGIN";
    }

    location /vue/ {
      proxy_pass http://vue:5173/;
      proxy_set_header Host $host;
      proxy_hide_header X-Frame-Options;
      add_header X-Frame-Options "SAMEORIGIN";
    }

    location /flask/ {
      proxy_pass http://flask:5000/;
      proxy_set_header Host $host;
      proxy_hide_header X-Frame-Options;
      add_header X-Frame-Options "SAMEORIGIN";
    }

    location /django/ {
      proxy_pass http://django:8000/;
      proxy_set_header Host $host;
      proxy_hide_header X-Frame-Options;
      add_header X-Frame-Options "SAMEORIGIN";
    }

    # Fallback: return launcher index for unknown paths (so single page behaves)
    location /_launcher_ {
      root /usr/share/launcher;
      internal;
    }
  }
}